{
  "structure": {
    "\ud83d\udcc4 .gitignore": "4,895 bytes",
    "\ud83d\udcc1 .vscode": {
      "\ud83d\udcc4 formmonkey.code-workspace": "1,140 bytes",
      "\ud83d\udcc4 settings.json": "853 bytes"
    },
    "\ud83d\udcc4 analyze_project.py": "14,207 bytes",
    "\ud83d\udcc1 backend": {
      "\ud83d\udcc4 .env": "243 bytes",
      "\ud83d\udcc4 .gitkeep": "1 bytes",
      "\ud83d\udcc1 .vscode": {
        "\ud83d\udcc4 launch.json": "825 bytes",
        "\ud83d\udcc4 settings.json": "518 bytes"
      },
      "\ud83d\udcc1 ai": {
        "\ud83d\udcc4 ai_engine.py": "0 bytes",
        "\ud83d\udcc4 ml_integration.py": "5,304 bytes",
        "\ud83d\udcc4 suggestion_logic.py": "0 bytes"
      },
      "\ud83d\udcc1 api": {
        "\ud83d\udcc4 dependencies.py": "0 bytes",
        "\ud83d\udcc4 routes.py": "0 bytes"
      },
      "\ud83d\udcc1 auth": {
        "\ud83d\udcc4 auth_router.py": "0 bytes",
        "\ud83d\udcc4 auth_utils.py": "2,040 bytes"
      },
      "\ud83d\udcc1 compliance": {
        "\ud83d\udcc4 audit_log.py": "2,864 bytes",
        "\ud83d\udcc4 disclaimers.py": "0 bytes",
        "\ud83d\udcc4 upl_safeguards.py": "0 bytes"
      },
      "\ud83d\udcc4 config.py": "2,685 bytes",
      "\ud83d\udcc1 export": {
        "\ud83d\udcc4 docx_exporter.py": "0 bytes",
        "\ud83d\udcc4 pdf_exporter.py": "0 bytes",
        "\ud83d\udcc4 signing_integration.py": "0 bytes"
      },
      "\ud83d\udcc4 main.py": "2,502 bytes",
      "\ud83d\udcc1 middleware": {
        "\ud83d\udcc4 validation.py": "15,323 bytes"
      },
      "\ud83d\udcc1 parser": {
        "\ud83d\udcc4 ocr_utils.py": "0 bytes",
        "\ud83d\udcc4 parser_service.py": "0 bytes"
      },
      "\ud83d\udcc1 profile": {
        "\ud83d\udcc4 profile_manager.py": "0 bytes",
        "\ud83d\udcc4 validators.py": "0 bytes"
      },
      "\ud83d\udcc4 requirements.txt": "444 bytes",
      "\ud83d\udcc1 routers": {
        "\ud83d\udcc4 export.py": "3,488 bytes",
        "\ud83d\udcc4 parse.py": "11,438 bytes",
        "\ud83d\udcc4 profile.py": "3,037 bytes",
        "\ud83d\udcc4 upload.py": "5,653 bytes"
      },
      "\ud83d\udcc1 services": {
        "\ud83d\udcc4 ai_assistance.py": "19,945 bytes",
        "\ud83d\udcc4 export_service.py": "4,341 bytes",
        "\ud83d\udcc4 master_profile.py": "8,026 bytes",
        "\ud83d\udcc4 parser_engine.py": "11,373 bytes",
        "\ud83d\udcc4 storage_service.py": "1,798 bytes"
      },
      "\ud83d\udcc1 shared": {
        "\ud83d\udcc4 __init__.py": "67 bytes",
        "\ud83d\udcc4 types.py": "8,869 bytes"
      },
      "\ud83d\udcc1 storage": {
        "\ud83d\udcc4 job_store.py": "14,053 bytes",
        "\ud83d\udcc4 storage_service.py": "0 bytes",
        "\ud83d\udcc4 versioning.py": "0 bytes"
      },
      "\ud83d\udcc1 tests": {
        "\ud83d\udcc4 __init__.py": "0 bytes"
      }
    },
    "\ud83d\udcc1 docs": {
      "\ud83d\udcc4 ai-error-handling-strategy.md": "35,055 bytes",
      "\ud83d\udcc4 ai-pipeline-status.md": "10,006 bytes",
      "\ud83d\udcc4 correction-workflow-analysis.md": "12,440 bytes",
      "\ud83d\udcc4 validation-implementation.md": "9,873 bytes",
      "\ud83d\udcc4 validation-strategy.md": "8,287 bytes"
    },
    "\ud83d\udcc1 frontend": {
      "\ud83d\udcc4 .gitkeep": "1 bytes",
      "\ud83d\udcc1 dist": {
        "\ud83d\udcc1 assets": {
          "\ud83d\udcc4 index-Bn6xCFa9.js": "189,960 bytes"
        },
        "\ud83d\udcc4 index.html": "396 bytes"
      },
      "\ud83d\udcc4 index.html": "373 bytes",
      "\ud83d\udcc4 package-lock.json": "58,587 bytes",
      "\ud83d\udcc4 package.json": "524 bytes",
      "\ud83d\udcc1 src": {
        "\ud83d\udcc4 App.js": "1,478 bytes",
        "\ud83d\udcc4 App.tsx": "1,564 bytes",
        "\ud83d\udcc1 assets": {},
        "\ud83d\udcc1 components": {
          "\ud83d\udcc4 ActionButtons.js": "2,055 bytes",
          "\ud83d\udcc4 ActionButtons.tsx": "2,582 bytes",
          "\ud83d\udcc4 CategorySection.js": "1,398 bytes",
          "\ud83d\udcc4 CategorySection.tsx": "1,835 bytes",
          "\ud83d\udcc4 FieldEditor.js": "7,067 bytes",
          "\ud83d\udcc4 FieldEditor.tsx": "7,713 bytes",
          "\ud83d\udcc4 FieldList.js": "2,394 bytes",
          "\ud83d\udcc4 FieldList.tsx": "3,039 bytes",
          "\ud83d\udcc4 FileUploadWidget.js": "7,387 bytes",
          "\ud83d\udcc4 FileUploadWidget.tsx": "8,404 bytes",
          "\ud83d\udcc4 FormPreview.js": "3,749 bytes",
          "\ud83d\udcc4 FormPreview.tsx": "4,586 bytes",
          "\ud83d\udcc4 FormPreview.tsx.bak": "9,676 bytes",
          "\ud83d\udcc4 Header.js": "1,097 bytes",
          "\ud83d\udcc4 Header.tsx": "1,143 bytes",
          "\ud83d\udcc4 import React, { useState, useEffect } fr.txt": "5,547 bytes",
          "\ud83d\udcc4 Navbar.js": "1,485 bytes",
          "\ud83d\udcc4 Navbar.tsx": "1,622 bytes",
          "\ud83d\udcc4 PreviewSummary.js": "1,998 bytes",
          "\ud83d\udcc4 PreviewSummary.tsx": "2,405 bytes",
          "\ud83d\udcc4 PreviewSummary.tsx.new": "5,549 bytes",
          "\ud83d\udcc4 SearchBar.js": "1,332 bytes",
          "\ud83d\udcc4 SearchBar.tsx": "1,642 bytes",
          "\ud83d\udcc4 Sidebar.js": "14 bytes",
          "\ud83d\udcc4 Sidebar.tsx": "0 bytes"
        },
        "\ud83d\udcc1 context": {
          "\ud83d\udcc4 UserContext.js": "14 bytes",
          "\ud83d\udcc4 UserContext.tsx": "0 bytes"
        },
        "\ud83d\udcc1 hooks": {
          "\ud83d\udcc4 useAutoSave.js": "3,262 bytes",
          "\ud83d\udcc4 useAutoSave.ts": "2,987 bytes",
          "\ud83d\udcc4 useForm.js": "14 bytes",
          "\ud83d\udcc4 useForm.ts": "0 bytes",
          "\ud83d\udcc4 useValidation.js": "8,346 bytes",
          "\ud83d\udcc4 useValidation.ts": "9,453 bytes"
        },
        "\ud83d\udcc4 index.js": "407 bytes",
        "\ud83d\udcc4 index.tsx": "383 bytes",
        "\ud83d\udcc4 main.js": "633 bytes",
        "\ud83d\udcc4 main.ts": "653 bytes",
        "\ud83d\udcc1 pages": {
          "\ud83d\udcc4 Export.js": "1,290 bytes",
          "\ud83d\udcc4 Export.tsx": "1,309 bytes",
          "\ud83d\udcc4 FormEditor.js": "475 bytes",
          "\ud83d\udcc4 FormEditor.tsx": "473 bytes",
          "\ud83d\udcc4 Home.js": "411 bytes",
          "\ud83d\udcc4 Home.tsx": "409 bytes",
          "\ud83d\udcc4 Preview.js": "6,972 bytes",
          "\ud83d\udcc4 Preview.tsx": "7,566 bytes",
          "\ud83d\udcc4 Profile.js": "1,258 bytes",
          "\ud83d\udcc4 Profile.tsx": "1,276 bytes",
          "\ud83d\udcc4 Settings.js": "380 bytes",
          "\ud83d\udcc4 Settings.tsx": "377 bytes",
          "\ud83d\udcc4 Upload.js": "1,649 bytes",
          "\ud83d\udcc4 Upload.tsx": "1,674 bytes"
        },
        "\ud83d\udcc1 services": {
          "\ud83d\udcc4 ai.js": "2,430 bytes",
          "\ud83d\udcc4 ai.ts": "2,679 bytes",
          "\ud83d\udcc4 api.js": "9,577 bytes",
          "\ud83d\udcc4 api.ts": "8,862 bytes"
        },
        "\ud83d\udcc1 styles": {
          "\ud83d\udcc4 global.css": "0 bytes"
        },
        "\ud83d\udcc1 types": {
          "\ud83d\udcc4 deprecated.js": "445 bytes",
          "\ud83d\udcc4 DEPRECATED.md": "2,373 bytes",
          "\ud83d\udcc4 deprecated.ts": "455 bytes",
          "\ud83d\udcc4 index.js": "253 bytes",
          "\ud83d\udcc4 index.ts": "721 bytes",
          "\ud83d\udcc4 shared.js": "2,071 bytes",
          "\ud83d\udcc4 shared.ts": "4,073 bytes",
          "\ud83d\udcc4 validation.js": "2,947 bytes",
          "\ud83d\udcc4 validation.ts": "2,950 bytes"
        },
        "\ud83d\udcc1 utils": {
          "\ud83d\udcc4 aiTestData.js": "4,662 bytes",
          "\ud83d\udcc4 aiTestData.ts": "4,295 bytes",
          "\ud83d\udcc4 api.js": "370 bytes",
          "\ud83d\udcc4 api.ts": "366 bytes",
          "\ud83d\udcc4 helpers.js": "14 bytes",
          "\ud83d\udcc4 helpers.ts": "0 bytes",
          "\ud83d\udcc4 validation.js": "1,791 bytes",
          "\ud83d\udcc4 validation.ts": "2,255 bytes"
        }
      },
      "\ud83d\udcc4 tsconfig.json": "562 bytes",
      "\ud83d\udcc4 vite.config.ts": "513 bytes"
    },
    "\ud83d\udcc4 PHASE_4_SCHEMA_FINAL.md": "6,195 bytes",
    "\ud83d\udcc4 PreviewSummary.tsx": "13,878 bytes",
    "\ud83d\udcc4 project-tree.txt": "205,782 bytes",
    "\ud83d\udcc4 project_analysis.json": "77,044 bytes",
    "\ud83d\udcc4 PROJECT_ANALYSIS.md": "11,005 bytes",
    "\ud83d\udcc1 scripts": {
      "\ud83d\udcc4 check_imports.py": "2,172 bytes",
      "\ud83d\udcc4 cleanup.sh": "454 bytes"
    },
    "\ud83d\udcc1 shared": {
      "\ud83d\udcc4 .gitkeep": "1 bytes",
      "\ud83d\udcc4 BACKEND_TYPE_MIGRATION.md": "3,198 bytes",
      "\ud83d\udcc1 constants": {
        "\ud83d\udcc4 config_keys.py": "0 bytes",
        "\ud83d\udcc4 roles.py": "0 bytes"
      },
      "\ud83d\udcc4 constants.py": "2,862 bytes",
      "\ud83d\udcc4 constants.ts": "2,943 bytes",
      "\ud83d\udcc4 FRONTEND_TYPE_MIGRATION.md": "3,140 bytes",
      "\ud83d\udcc4 index.py": "2,927 bytes",
      "\ud83d\udcc4 index.ts": "3,685 bytes",
      "\ud83d\udcc4 logger.py": "4,540 bytes",
      "\ud83d\udcc4 MODULE_RENAME_NOTICE.md": "2,036 bytes",
      "\ud83d\udcc4 package-lock.json": "20,498 bytes",
      "\ud83d\udcc4 package.json": "947 bytes",
      "\ud83d\udcc4 prompts.ts": "1,829 bytes",
      "\ud83d\udcc4 pyproject.toml": "860 bytes",
      "\ud83d\udcc4 README.md": "2,241 bytes",
      "\ud83d\udcc1 schemas": {
        "\ud83d\udcc4 form_schema.py": "0 bytes",
        "\ud83d\udcc4 user_profile.py": "0 bytes"
      },
      "\ud83d\udcc4 schemas.py": "14,812 bytes",
      "\ud83d\udcc4 storage.py": "5,333 bytes",
      "\ud83d\udcc4 tsconfig.json": "429 bytes",
      "\ud83d\udcc4 type_checker.py": "3,452 bytes",
      "\ud83d\udcc4 type_migration.py": "5,925 bytes",
      "\ud83d\udcc4 type_migration.ts": "2,947 bytes",
      "\ud83d\udcc4 type_strategy.py": "2,769 bytes",
      "\ud83d\udcc4 type_strategy.ts": "2,644 bytes",
      "\ud83d\udcc1 types": {
        "\ud83d\udcc4 auth_types.py": "0 bytes",
        "\ud83d\udcc4 form_types.py": "0 bytes"
      },
      "\ud83d\udcc4 types.js": "7,563 bytes",
      "\ud83d\udcc4 types.py": "15,056 bytes",
      "\ud83d\udcc4 types.ts": "16,016 bytes",
      "\ud83d\udcc1 utils": {
        "\ud83d\udcc4 formatting.py": "0 bytes",
        "\ud83d\udcc4 validators.py": "0 bytes"
      },
      "\ud83d\udcc4 utils.py": "3,406 bytes",
      "\ud83d\udcc4 utils.ts": "1,713 bytes",
      "\ud83d\udcc4 validators.ts": "14,379 bytes"
    }
  },
  "dependencies": {
    "backend": [
      "fastapi>=0.100.0",
      "pydantic>=2.0.0",
      "PyMuPDF>=1.22.0  # For PDF text extraction",
      "python-docx>=0.8.11  # For DOCX text extraction",
      "python-multipart  # For file upload handling",
      "regex>=2023.0.0  # Advanced regex support for field extraction",
      "aioredis>=2.0.0  # For Redis job storage",
      "uvicorn>=0.22.0  # ASGI server",
      "python-jose>=3.3.0  # For JWT token handling",
      "passlib>=1.7.4  # For password hashing",
      "bcrypt>=4.0.1  # For secure password storage"
    ],
    "frontend": {
      "dependencies": [
        "react",
        "react-dom",
        "zod"
      ],
      "devDependencies": [
        "@types/node",
        "@types/react",
        "@types/react-dom",
        "@vitejs/plugin-react",
        "typescript",
        "vite"
      ]
    }
  },
  "api_endpoints": [],
  "components": [
    {
      "name": "PreviewSummary",
      "file": "PreviewSummary.tsx"
    },
    {
      "name": "App",
      "file": "frontend\\src\\App.tsx"
    },
    {
      "name": "ActionButtons",
      "file": "frontend\\src\\components\\ActionButtons.tsx"
    },
    {
      "name": "CategorySection",
      "file": "frontend\\src\\components\\CategorySection.tsx"
    },
    {
      "name": "FieldEditor",
      "file": "frontend\\src\\components\\FieldEditor.tsx"
    },
    {
      "name": "FieldList",
      "file": "frontend\\src\\components\\FieldList.tsx"
    },
    {
      "name": "FileUploadWidget",
      "file": "frontend\\src\\components\\FileUploadWidget.tsx"
    },
    {
      "name": "FormPreview",
      "file": "frontend\\src\\components\\FormPreview.tsx"
    },
    {
      "name": "Header",
      "file": "frontend\\src\\components\\Header.tsx"
    },
    {
      "name": "Navbar",
      "file": "frontend\\src\\components\\Navbar.tsx"
    },
    {
      "name": "PreviewSummary",
      "file": "frontend\\src\\components\\PreviewSummary.tsx"
    },
    {
      "name": "SearchBar",
      "file": "frontend\\src\\components\\SearchBar.tsx"
    },
    {
      "name": "Preview",
      "file": "frontend\\src\\pages\\Preview.tsx"
    }
  ],
  "todos": [
    {
      "file": "analyze_project.py",
      "todo": "s"
    },
    {
      "file": "PreviewSummary.tsx",
      "todo": "[AI_FRONTEND_PRE4]: CRITICAL REPAIRS - Decompose this 300+ line component into smaller focused components: SearchBar, ActionButtons, CategorySection, FieldList. Extract auto-save logic into custom hook. Fix type imports to use shared/types instead of local types."
    },
    {
      "file": "backend\\config.py",
      "todo": "[0]: Provide project-level constants via os.getenv()"
    },
    {
      "file": "backend\\config.py",
      "todo": "[0.1]: Load env vars with fallback to default.env file"
    },
    {
      "file": "backend\\config.py",
      "todo": "[0.2]: Implement singleton pattern for config instance"
    },
    {
      "file": "backend\\config.py",
      "todo": "[1]: Support for dev vs prod config switching"
    },
    {
      "file": "backend\\config.py",
      "todo": "[1.1]: Add retry logic for database connection testing"
    },
    {
      "file": "backend\\config.py",
      "todo": "[1.2]: Define fallback model sequence priority"
    },
    {
      "file": "backend\\config.py",
      "todo": "[2]: Should be consumed by all routers + services (esp. file limits, model paths)"
    },
    {
      "file": "backend\\config.py",
      "todo": "[2.1]: Validate directory existence on startup"
    },
    {
      "file": "backend\\config.py",
      "todo": "[2.2]: Check write permissions for upload/temp folders"
    },
    {
      "file": "backend\\config.py",
      "todo": "[2.3]: Ensure JWT secret is 32+ chars minimum"
    },
    {
      "file": "backend\\config.py",
      "todo": "[2.4]: Parse CORS origins as array from string"
    },
    {
      "file": "backend\\main.py",
      "todo": "[0]: Entry point for FastAPI app \u2014 must import config, routers, middleware, auth, shared constants"
    },
    {
      "file": "backend\\main.py",
      "todo": "[0.1]: Wrap app instantiation in try/except for boot error visibility"
    },
    {
      "file": "backend\\main.py",
      "todo": "[0.2]: Insert debug log on app start with config mode"
    },
    {
      "file": "backend\\main.py",
      "todo": "[1]: Initialize app with security middleware (CORS, logging)"
    },
    {
      "file": "backend\\main.py",
      "todo": "[1.1]: Add conditional CORS origin whitelist from config"
    },
    {
      "file": "backend\\main.py",
      "todo": "[1.2]: Inject logging middleware with request ID tracking"
    },
    {
      "file": "backend\\main.py",
      "todo": "[2]: Mount routers: upload, parse, profile, export"
    },
    {
      "file": "backend\\main.py",
      "todo": "[2.1]: Verify each router mount path via integration test"
    },
    {
      "file": "backend\\main.py",
      "todo": "[3]: Define global exception handler"
    },
    {
      "file": "backend\\main.py",
      "todo": "[3.1]: Hook structured logger for unhandled exceptions"
    },
    {
      "file": "backend\\main.py",
      "todo": "[3.2]: Ensure validation errors return JSON"
    },
    {
      "file": "backend\\main.py",
      "todo": "[4]: Add /ping health check"
    },
    {
      "file": "backend\\main.py",
      "todo": "[4.1]: Add timestamp + commit hash to ping response"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[0]: Define endpoints for /export/pdf, /export/docx, /export/sign"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[0.1]: Add comprehensive format validation for export requests"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[0.2]: Log export attempts with user ID and document metadata"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[1]: Call export_service + e-sign module"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[1.1]: Implement template-based PDF generation with validation"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[1.2]: Support complex DOCX formatting and embedded objects"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[2]: Return downloadable link or sign status"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[2.1]: Add watermarking and security features for PDFs"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[2.2]: Add signature workflow tracking and status updates"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[3]: Handle permissions and audit trail logging"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[3.1]: Ensure graceful fallback when signing services unavailable"
    },
    {
      "file": "backend\\routers\\export.py",
      "todo": "[3.2]: Add retry mechanisms for failed export operations"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[0]: GET/PUT/DELETE endpoints for Master Profile"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[0.1]: Add role-based access control for profile operations"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[0.2]: Log profile changes with audit trail"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[1]: Authenticate user and fetch profile"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[1.1]: Support partial profile loading for performance"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[1.2]: Include profile completeness metrics"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[2]: Validate incoming fields with Pydantic"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[2.1]: Implement field-level validation with detailed error messages"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[2.2]: Track profile change history for compliance"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[2.3]: Add conflict resolution for duplicate field values"
    },
    {
      "file": "backend\\routers\\profile.py",
      "todo": "[2.4]: Ensure atomic profile updates across related entities"
    },
    {
      "file": "backend\\routers\\upload.py",
      "todo": "[1.1]: Implement virus scanning for uploaded files - Added placeholder in main endpoint"
    },
    {
      "file": "backend\\routers\\upload.py",
      "todo": "[2.1]: Add retry mechanism for parsing failures - To be implemented"
    },
    {
      "file": "backend\\routers\\upload.py",
      "todo": "[2.2]: Queue parsing for large files vs immediate processing - To be implemented"
    },
    {
      "file": "backend\\routers\\upload.py",
      "todo": "[3.1]: Include progress tracking endpoints for large files - To be implemented"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[0]: Predict default field values from context"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[0.1]: Implement model selection logic with fallback chains"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[0.2]: Add comprehensive error handling for AI service failures"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[1]: Suggest legal clauses (e.g., termination, arbitration)"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[1.1]: Build legal field type recognition (party names, dates, amounts)"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[1.2]: Implement confidence scoring for AI suggestions"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[2]: Redact PII from prompt input"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[2.1]: Add privacy-preserving profile matching algorithms"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[2.2]: Implement context-aware field mapping strategies"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[3]: Prepare prompt for local/remote LLM"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[3.1]: Add model performance monitoring and switching logic"
    },
    {
      "file": "backend\\services\\ai_assistance.py",
      "todo": "[3.2]: Build legal clause recognition and classification"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[0]: Generate final PDF/DOCX with edits"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[0.1]: Add comprehensive template validation and error handling"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[0.2]: Implement atomic export operations with rollback capability"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[1]: Apply watermarking + audit overlay"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[1.1]: Add PDF form field mapping and validation"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[1.2]: Implement PDF security features (password protection, encryption)"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[2]: Handle e-sign submission (via HelloSign, etc.)"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[2.1]: Support complex DOCX formatting and conditional content"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[2.2]: Implement signature placement optimization algorithms"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[3]: Return export URL or sign link"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[3.1]: Add progress tracking and cancellation support for long exports"
    },
    {
      "file": "backend\\services\\export_service.py",
      "todo": "[3.2]: Add document preparation validation before signing"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[0]: Store/retrieve user info securely"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[0.1]: Implement comprehensive profile validation and sanitization"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[0.2]: Add audit logging for all profile modifications"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[1]: Enable patch updates for field groups"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[1.1]: Add field change tracking with history retention"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[1.2]: Implement data encryption for sensitive profile fields"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[2]: Integrate with config + ai_assistance for autofill"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[2.1]: Add intelligent field mapping between profile and document types"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[2.2]: Implement conflict resolution for overlapping field values"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[3]: Return fields formatted for frontend PreviewPage"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[3.1]: Add profile switching and management workflows"
    },
    {
      "file": "backend\\services\\master_profile.py",
      "todo": "[3.2]: Add machine learning for profile enhancement suggestions"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[0]: Accept uploaded file, perform OCR if needed"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[0.1]: Add comprehensive error handling for malformed documents"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[0.2]: Implement document format detection and validation"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[1]: Detect semantic fields, clauses, tables"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[1.1]: Add confidence scoring for field detection"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[1.2]: Implement fallback detection methods for reliability"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[2]: Return normalized structured field list"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[2.1]: Add regex patterns for common legal document formats"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[2.2]: Implement fuzzy matching for field variations"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[3]: Interface with shared.types and storage utils"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[3.1]: Add caching layer for processed document segments"
    },
    {
      "file": "backend\\services\\parser_engine.py",
      "todo": "[3.2]: Implement parallel processing for large documents"
    },
    {
      "file": "frontend\\node_modules\\@ampproject\\remapping\\dist\\remapping.umd.js",
      "todo": "Eventually support sourceRoot, which has to be removed because the sources are already"
    },
    {
      "file": "frontend\\node_modules\\@ampproject\\remapping\\dist\\remapping.umd.js",
      "todo": "We should eventually support async loading of sourcemap files."
    },
    {
      "file": "frontend\\node_modules\\@babel\\compat-data\\corejs2-built-ins.js",
      "todo": "(Babel 8): remove this file as Babel 8 drop support of core-js 2"
    },
    {
      "file": "frontend\\node_modules\\@babel\\compat-data\\corejs3-shipped-proposals.js",
      "todo": "(Babel 8): remove this file now that it is included in babel-plugin-polyfill-corejs3"
    },
    {
      "file": "frontend\\node_modules\\@babel\\compat-data\\native-modules.js",
      "todo": "(Babel 8): remove this file, in Babel 8 users import the .json directly"
    },
    {
      "file": "frontend\\node_modules\\@babel\\compat-data\\overlapping-plugins.js",
      "todo": "(Babel 8): remove this file, in Babel 8 users import the .json directly"
    },
    {
      "file": "frontend\\node_modules\\@babel\\compat-data\\plugin-bugfixes.js",
      "todo": "(Babel 8): remove this file, in Babel 8 users import the .json directly"
    },
    {
      "file": "frontend\\node_modules\\@babel\\compat-data\\plugins.js",
      "todo": "(Babel 8): remove this file, in Babel 8 users import the .json directly"
    },
    {
      "file": "frontend\\node_modules\\@babel\\parser\\typings\\babel-parser.d.ts",
      "todo": "(flow->ts) real token type"
    },
    {
      "file": "frontend\\node_modules\\@jridgewell\\gen-mapping\\src\\gen-mapping.ts",
      "todo": "implement originalScopes/generatedRanges"
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\module.d.ts",
      "todo": "consider removing in a future major version update"
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\perf_hooks.d.ts",
      "todo": "Narrow this based on entry type."
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\timers.d.ts",
      "todo": "remove in a future major version bump"
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\util.d.ts",
      "todo": ", inspect: inspect"
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\wasi.d.ts",
      "todo": "avoid DOM dependency until WASM moved to own lib."
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\wasi.d.ts",
      "todo": "avoid DOM dependency until WASM moved to own lib."
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\wasi.d.ts",
      "todo": "Narrow to DOM types"
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\worker_threads.d.ts",
      "todo": "remove in a future major @types/node version."
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\compatibility\\iterators.d.ts",
      "todo": "remove once this package no longer supports TS 5.5, and replace NodeJS.BuiltinIteratorReturn with BuiltinIteratorReturn."
    },
    {
      "file": "frontend\\node_modules\\@types\\node\\fs\\promises.d.ts",
      "todo": "Add `EventEmitter` close"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\index.d.ts",
      "todo": "generalize this to everything in `keyof ReactHTML`, not just \"input\""
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\index.d.ts",
      "todo": "Ideally we'd infer the constructor signatur from `contextType`."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\index.d.ts",
      "todo": "change any to unknown when moving to TS v3"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\index.d.ts",
      "todo": "Move to react-dom"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\index.d.ts",
      "todo": "Move to react-dom"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\index.d.ts",
      "todo": "Check impact of making React.ElementType<P = any> = React.JSXElementConstructor<P>"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\index.d.ts",
      "todo": "It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\index.d.ts",
      "todo": "It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\index.d.ts",
      "todo": "generalize this to everything in `keyof ReactHTML`, not just \"input\""
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\index.d.ts",
      "todo": "Ideally we'd infer the constructor signatur from `contextType`."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\index.d.ts",
      "todo": "change any to unknown when moving to TS v3"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\index.d.ts",
      "todo": "Move to react-dom"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\index.d.ts",
      "todo": "Move to react-dom"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\index.d.ts",
      "todo": "It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\index.d.ts",
      "todo": "It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\index.d.ts",
      "todo": "Remove the string ref special case from `PropsWithRef` once we remove LegacyRef"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\index.d.ts",
      "todo": "generalize this to everything in `keyof ReactHTML`, not just \"input\""
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\index.d.ts",
      "todo": "double-check if this weird overload logic is necessary. It is possible it's either a bug"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\index.d.ts",
      "todo": "change any to unknown when moving to TS v3"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\index.d.ts",
      "todo": "Check impact of making React.ElementType<P = any> = React.JSXElementConstructor<P>"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\index.d.ts",
      "todo": "It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\index.d.ts",
      "todo": "It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\ts5.0\\index.d.ts",
      "todo": "Remove the string ref special case from `PropsWithRef` once we remove LegacyRef"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\ts5.0\\index.d.ts",
      "todo": "generalize this to everything in `keyof ReactHTML`, not just \"input\""
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\ts5.0\\index.d.ts",
      "todo": "double-check if this weird overload logic is necessary. It is possible it's either a bug"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\ts5.0\\index.d.ts",
      "todo": "change any to unknown when moving to TS v3"
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\ts5.0\\index.d.ts",
      "todo": "It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now."
    },
    {
      "file": "frontend\\node_modules\\@types\\react\\ts5.0\\v18\\ts5.0\\index.d.ts",
      "todo": "It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now."
    },
    {
      "file": "frontend\\node_modules\\@types\\react-dom\\index.d.ts",
      "todo": "Upstream to microsoft/TypeScript-DOM-lib-generator -> w3c/webref"
    },
    {
      "file": "frontend\\node_modules\\@types\\react-dom\\index.d.ts",
      "todo": "These should only be allowed with `as: 'image'` but it's not trivial to write tests against the full TS support matrix."
    },
    {
      "file": "frontend\\node_modules\\@vitejs\\plugin-react\\dist\\refresh-runtime.js",
      "todo": "rename these fields to something more meaningful."
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\node-entry.js",
      "todo": "is this block necessary?..."
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\node-entry.js",
      "todo": "last chunk in the array may not be the last chunk, if it's moved..."
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\node-entry.js",
      "todo": "deprecate this? not really very useful"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\node-entry.js",
      "todo": "there's a bunch of this sort of thing, needs cleaning up"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\node-entry.js",
      "todo": "we are pretending it was not found while it should behave like \"undefined\""
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\watch.js",
      "todo": "emit errors properly. Example: EMFILE on Macos."
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\watch.js",
      "todo": "// listeners.add(listener);"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\watch.js",
      "todo": "real check"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\watch.js",
      "todo": "Strange thing: \"should not choke on an ignored watch path\" will be failed without 2 ready calls -__-"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\watch.js",
      "todo": "this is not equal to path-normalize module - investigate why"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\es\\shared\\watch.js",
      "todo": "throws or warn? Currently just ignore, uses new event"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\index.js",
      "todo": "emit errors properly. Example: EMFILE on Macos."
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\index.js",
      "todo": "// listeners.add(listener);"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\index.js",
      "todo": "real check"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\index.js",
      "todo": "Strange thing: \"should not choke on an ignored watch path\" will be failed without 2 ready calls -__-"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\index.js",
      "todo": "this is not equal to path-normalize module - investigate why"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\rollup.js",
      "todo": "is this block necessary?..."
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\rollup.js",
      "todo": "last chunk in the array may not be the last chunk, if it's moved..."
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\rollup.js",
      "todo": "deprecate this? not really very useful"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\rollup.js",
      "todo": "there's a bunch of this sort of thing, needs cleaning up"
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\rollup.js",
      "todo": "we are pretending it was not found while it should behave like \"undefined\""
    },
    {
      "file": "frontend\\node_modules\\rollup\\dist\\shared\\watch.js",
      "todo": "throws or warn? Currently just ignore, uses new event"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "don't use slice"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "don't use slice"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s."
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "Should prefix `++` and `--` be moved to the `Update` precedence?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "should we separate these branches out?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(rbuckton): JSDoc parameters don't have names (except `this`/`new`), should we manufacture an empty identifier?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "could probably serialize as function + ns + class, now that that's OK"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "https://github.com/microsoft/TypeScript/pull/32372#discussion_r328386357"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s."
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(rbuckton): Does this need to be parented?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "syntax errors????"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(jfreeman): What should be the containerName when the container has a computed name?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "Maybe we should handle this? See fourslash test `refactorConvertToEs6Module_export_object_shorthand.ts`."
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "Handle auto quote preference."
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#23879"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "should have its own kind?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "// case SyntaxKind.ElseClause:"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(jakebailey): correctly type the handlers"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "don't use slice"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "don't use slice"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s."
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "Should prefix `++` and `--` be moved to the `Update` precedence?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "should we separate these branches out?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "(rbuckton): JSDoc parameters don't have names (except `this`/`new`), should we manufacture an empty identifier?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "could probably serialize as function + ns + class, now that that's OK"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "https://github.com/microsoft/TypeScript/pull/32372#discussion_r328386357"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s."
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "(rbuckton): Does this need to be parented?"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "frontend\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "syntax errors????"
    },
    {
      "file": "frontend\\node_modules\\undici-types\\webidl.d.ts",
      "todo": "(@KhafraDev): a type could likely be implemented that can infer the return type"
    },
    {
      "file": "frontend\\node_modules\\zod\\src\\v3\\tests\\object.test.ts",
      "todo": "// util.assertEqual<Merged, { a?: string; b: string }>(true);"
    },
    {
      "file": "frontend\\node_modules\\zod\\src\\v4\\classic\\tests\\lazy.test.ts",
      "todo": "test(\"mutual recursion with cyclical data\", () => {"
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[0]: Drag-and-drop + manual upload"
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[0.1]: Add comprehensive file validation with immediate feedback"
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[0.2]: Implement upload queue management with retry capabilities"
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[AI_FRONTEND_RETRY]: Build React upload component. Drag-drop zone + file input. Show selected files with name/size. Validate .pdf/.docx and 10MB client-side. POST to /api/upload on submit. Display upload status per file."
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[1.1]: Add file type detection and MIME validation"
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[1.2]: Add detailed upload analytics and speed estimation"
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[2]: Show progress bar and error states"
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[2.1]: Add accessibility features for keyboard and screen reader users"
    },
    {
      "file": "frontend\\src\\components\\FileUploadWidget.tsx",
      "todo": "[2.2]: Add offline upload queuing with automatic retry"
    },
    {
      "file": "frontend\\src\\pages\\Preview.js",
      "todo": "[AI_FRONTEND_PRE4]: TYPE SYSTEM CONSOLIDATION - Replace local '../types' imports with local types for frontend-only workspace compatibility."
    },
    {
      "file": "frontend\\src\\pages\\Preview.tsx",
      "todo": "[AI_FRONTEND_PRE4]: TYPE SYSTEM CONSOLIDATION - Replace local '../types' imports with local types for frontend-only workspace compatibility."
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[0]: Render FileUploadWidget"
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[0.1]: Add comprehensive file validation with real-time feedback"
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[0.2]: Implement upload progress tracking with cancellation support"
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[1]: Handle file upload via API"
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[1.1]: Add multi-file upload support with batch processing"
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[1.2]: Add detailed error messages with resolution guidance"
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[2]: Redirect to PreviewPage on success"
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[2.1]: Add upload history and recently processed files"
    },
    {
      "file": "frontend\\src\\pages\\Upload.js",
      "todo": "[2.2]: Add offline upload queuing with sync when online"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[0]: Render FileUploadWidget"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[0.1]: Add comprehensive file validation with real-time feedback"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[0.2]: Implement upload progress tracking with cancellation support"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[1]: Handle file upload via API"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[1.1]: Add multi-file upload support with batch processing"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[1.2]: Add detailed error messages with resolution guidance"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[2]: Redirect to PreviewPage on success"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[2.1]: Add upload history and recently processed files"
    },
    {
      "file": "frontend\\src\\pages\\Upload.tsx",
      "todo": "[2.2]: Add offline upload queuing with sync when online"
    },
    {
      "file": "frontend\\src\\services\\api.js",
      "todo": "[AI_FRONTEND_PRE4]: API INTEGRATION VALIDATION - Verify all API functions match actual backend endpoints. Remove mock implementations and replace with real backend calls. Add proper error handling and retry logic. Ensure response types match shared/types definitions."
    },
    {
      "file": "frontend\\src\\services\\api.ts",
      "todo": "[AI_FRONTEND_PRE4]: API INTEGRATION VALIDATION - Verify all API functions match actual backend endpoints. Remove mock implementations and replace with real backend calls. Add proper error handling and retry logic. Ensure response types match shared/types definitions."
    },
    {
      "file": "frontend\\src\\types\\index.js",
      "todo": "[AI_SHARED_PRE4]: TYPE SYSTEM CONSOLIDATION - This file provides compatibility"
    },
    {
      "file": "frontend\\src\\types\\index.ts",
      "todo": "[AI_SHARED_PRE4]: TYPE SYSTEM CONSOLIDATION - This file provides compatibility"
    },
    {
      "file": "shared\\constants.py",
      "todo": "[0]: Define global constants used across backend and frontend"
    },
    {
      "file": "shared\\constants.py",
      "todo": "[0.1]: Organize constants into logical groups (file types, config keys, defaults)"
    },
    {
      "file": "shared\\constants.py",
      "todo": "[1]: Ensure values come from config when possible"
    },
    {
      "file": "shared\\constants.py",
      "todo": "[2]: Include documentation string for each constant group"
    },
    {
      "file": "shared\\constants.py",
      "todo": "[3]: Export as read-only to prevent runtime mutation"
    },
    {
      "file": "shared\\constants.ts",
      "todo": "[0]: Define file type constants, endpoint names, validation ranges"
    },
    {
      "file": "shared\\constants.ts",
      "todo": "[0.1]: Add environment-specific constant overrides with validation"
    },
    {
      "file": "shared\\constants.ts",
      "todo": "[0.2]: Implement constant validation at application startup"
    },
    {
      "file": "shared\\constants.ts",
      "todo": "[1]: Used across all modules; ensure synchronization"
    },
    {
      "file": "shared\\constants.ts",
      "todo": "[1.1]: Add MIME type validation mapping for security"
    },
    {
      "file": "shared\\constants.ts",
      "todo": "[1.2]: Add jurisdiction-specific field validation rules"
    },
    {
      "file": "shared\\constants.ts",
      "todo": "[1.3]: Add multilingual error message support"
    },
    {
      "file": "shared\\constants.ts",
      "todo": "[1.4]: Add configuration validation between frontend and backend"
    },
    {
      "file": "shared\\logger.py",
      "todo": "[0]: Set up project-wide structured logging"
    },
    {
      "file": "shared\\logger.py",
      "todo": "[0.1]: Add correlation ID to each request log"
    },
    {
      "file": "shared\\logger.py",
      "todo": "[1]: Support logging to console and file (based on config)"
    },
    {
      "file": "shared\\logger.py",
      "todo": "[2]: Integrate with FastAPI middleware for request tracing"
    },
    {
      "file": "shared\\logger.py",
      "todo": "[3]: Include log formatter for timestamped, JSON-formatted logs"
    },
    {
      "file": "shared\\prompts.ts",
      "todo": "[0]: Store standard prompts for LLM assistance"
    },
    {
      "file": "shared\\prompts.ts",
      "todo": "[0.1]: Add dynamic prompt generation based on document type and context"
    },
    {
      "file": "shared\\prompts.ts",
      "todo": "[0.2]: Implement prompt versioning and A/B testing capabilities"
    },
    {
      "file": "shared\\prompts.ts",
      "todo": "[1]: Support prompt templating + field injection"
    },
    {
      "file": "shared\\prompts.ts",
      "todo": "[1.1]: Add jurisdiction-specific legal language and terminology"
    },
    {
      "file": "shared\\prompts.ts",
      "todo": "[1.2]: Add automatic PII detection and sanitization in prompts"
    },
    {
      "file": "shared\\prompts.ts",
      "todo": "[1.3]: Add confidence calibration prompts for uncertainty estimation"
    },
    {
      "file": "shared\\prompts.ts",
      "todo": "[1.4]: Add model-specific prompt formatting and optimization"
    },
    {
      "file": "shared\\storage.py",
      "todo": "[0]: Read/write files from disk using secure paths"
    },
    {
      "file": "shared\\storage.py",
      "todo": "[0.1]: Use config to determine base storage directory"
    },
    {
      "file": "shared\\storage.py",
      "todo": "[1]: Prevent directory traversal and injection attacks"
    },
    {
      "file": "shared\\storage.py",
      "todo": "[2]: Add retry logic for transient I/O errors"
    },
    {
      "file": "shared\\storage.py",
      "todo": "[3]: Include audit logging for all file access"
    },
    {
      "file": "shared\\types.js",
      "todo": "Define canonical interfaces for Field, ProfileData, JobMeta"
    },
    {
      "file": "shared\\types.js",
      "todo": "Add comprehensive validation decorators for all interface fields"
    },
    {
      "file": "shared\\types.js",
      "todo": "Implement runtime type checking with detailed error messages"
    },
    {
      "file": "shared\\types.js",
      "todo": "Add field dependency mapping for complex form relationships"
    },
    {
      "file": "shared\\types.js",
      "todo": "Add granular progress states with percentage tracking"
    },
    {
      "file": "shared\\types.js",
      "todo": "Add multi-entity profile management with role-based access"
    },
    {
      "file": "shared\\types.js",
      "todo": "Add confidence scoring interfaces for AI predictions"
    },
    {
      "file": "shared\\types.py",
      "todo": "[0]: Define Pydantic models for shared field types (e.g., ParsedField, UserProfile)"
    },
    {
      "file": "shared\\types.py",
      "todo": "[0.1]: Add JSON serialization support for each model"
    },
    {
      "file": "shared\\types.py",
      "todo": "[1]: Include optional validation rules (e.g., regex, length)"
    },
    {
      "file": "shared\\types.py",
      "todo": "[2]: Use type annotations that match frontend expectations"
    },
    {
      "file": "shared\\types.py",
      "todo": "[3]: Ensure compatibility with parser_engine and ai_assistance return formats"
    },
    {
      "file": "shared\\types.ts",
      "todo": "Define canonical interfaces for Field, ProfileData, JobMeta"
    },
    {
      "file": "shared\\types.ts",
      "todo": "Add comprehensive validation decorators for all interface fields"
    },
    {
      "file": "shared\\types.ts",
      "todo": "Implement runtime type checking with detailed error messages"
    },
    {
      "file": "shared\\types.ts",
      "todo": "Add field dependency mapping for complex form relationships"
    },
    {
      "file": "shared\\types.ts",
      "todo": "Add granular progress states with percentage tracking"
    },
    {
      "file": "shared\\types.ts",
      "todo": "Add multi-entity profile management with role-based access"
    },
    {
      "file": "shared\\types.ts",
      "todo": "Add confidence scoring interfaces for AI predictions"
    },
    {
      "file": "shared\\type_checker.py",
      "todo": "Implement the actual type checking logic"
    },
    {
      "file": "shared\\type_strategy.py",
      "todo": "Add remaining types with their migration status"
    },
    {
      "file": "shared\\type_strategy.ts",
      "todo": "Add remaining types with their migration status"
    },
    {
      "file": "shared\\utils.py",
      "todo": "[0]: Provide shared helper functions (e.g., sanitize_filename, hash_file)"
    },
    {
      "file": "shared\\utils.py",
      "todo": "[0.1]: Add logging for each utility function's inputs and outputs"
    },
    {
      "file": "shared\\utils.py",
      "todo": "[1]: Include error handling logic for edge cases (e.g., invalid filenames)"
    },
    {
      "file": "shared\\utils.py",
      "todo": "[2]: Keep functions stateless and side-effect free"
    },
    {
      "file": "shared\\utils.py",
      "todo": "[3]: Unit test each utility for common failure scenarios"
    },
    {
      "file": "shared\\utils.ts",
      "todo": "[0]: Provide shared helper functions for file naming, job ID generation"
    },
    {
      "file": "shared\\utils.ts",
      "todo": "[0.1]: Add comprehensive input sanitization and validation utilities"
    },
    {
      "file": "shared\\utils.ts",
      "todo": "[0.2]: Implement consistent error handling patterns across utilities"
    },
    {
      "file": "shared\\utils.ts",
      "todo": "[1]: Keep logic environment-neutral"
    },
    {
      "file": "shared\\utils.ts",
      "todo": "[1.1]: Add regex patterns for legal entity validation (SSN, EIN, etc.)"
    },
    {
      "file": "shared\\utils.ts",
      "todo": "[1.2]: Add type-safe serialization/deserialization utilities"
    },
    {
      "file": "shared\\utils.ts",
      "todo": "[1.3]: Add encryption/decryption utilities for sensitive data"
    },
    {
      "file": "shared\\utils.ts",
      "todo": "[1.4]: Add environment detection and platform-specific optimizations"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "Update to import from './schemas' when the TypeScript equivalent is renamed"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "[0]: Shared schema validators for file upload, profile field rules"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "[0.1]: Add comprehensive validation rule composition and chaining"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "[0.2]: Implement custom validation error types with detailed context"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "[1]: Used in frontend form hooks and backend endpoints"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "[1.1]: Add jurisdiction-specific validation rules for legal entities"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "[1.2]: Add schema validation for complex document structures"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "[1.3]: Add business rule validation for legal document consistency"
    },
    {
      "file": "shared\\validators.ts",
      "todo": "[1.4]: Add async validation support for external data verification"
    },
    {
      "file": "shared\\node_modules\\minimatch\\dist\\commonjs\\ast.js",
      "todo": "instead of injecting the start/end at this point, just return"
    },
    {
      "file": "shared\\node_modules\\minimatch\\dist\\esm\\ast.js",
      "todo": "instead of injecting the start/end at this point, just return"
    },
    {
      "file": "shared\\node_modules\\path-key\\index.d.ts",
      "todo": "Remove this for the next major release, refactor the whole definition to:"
    },
    {
      "file": "shared\\node_modules\\path-key\\index.js",
      "todo": "Remove this for the next major release"
    },
    {
      "file": "shared\\node_modules\\path-scurry\\dist\\commonjs\\index.js",
      "todo": "test perf of fs/promises realpath vs realpathCB,"
    },
    {
      "file": "shared\\node_modules\\path-scurry\\dist\\esm\\index.js",
      "todo": "test perf of fs/promises realpath vs realpathCB,"
    },
    {
      "file": "shared\\node_modules\\string-width-cjs\\index.d.ts",
      "todo": "remove this in the next major version, refactor the whole definition to:"
    },
    {
      "file": "shared\\node_modules\\string-width-cjs\\index.js",
      "todo": "remove this in the next major version"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "don't use slice"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "don't use slice"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s."
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "Should prefix `++` and `--` be moved to the `Update` precedence?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "should we separate these branches out?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(rbuckton): JSDoc parameters don't have names (except `this`/`new`), should we manufacture an empty identifier?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "could probably serialize as function + ns + class, now that that's OK"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "https://github.com/microsoft/TypeScript/pull/32372#discussion_r328386357"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s."
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(rbuckton): Does this need to be parented?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "syntax errors????"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(jfreeman): What should be the containerName when the container has a computed name?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "Maybe we should handle this? See fourslash test `refactorConvertToEs6Module_export_object_shorthand.ts`."
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "Handle auto quote preference."
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#23879"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "should have its own kind?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "// case SyntaxKind.ElseClause:"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "(jakebailey): correctly type the handlers"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\typescript.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "don't use slice"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "don't use slice"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s."
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "Should prefix `++` and `--` be moved to the `Update` precedence?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "should we separate these branches out?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "(rbuckton): JSDoc parameters don't have names (except `this`/`new`), should we manufacture an empty identifier?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "could probably serialize as function + ns + class, now that that's OK"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "https://github.com/microsoft/TypeScript/pull/32372#discussion_r328386357"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s."
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "(rbuckton): Does this need to be parented?"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "GH#18217"
    },
    {
      "file": "shared\\node_modules\\typescript\\lib\\_tsc.js",
      "todo": "syntax errors????"
    },
    {
      "file": "shared\\node_modules\\wrap-ansi-cjs\\node_modules\\string-width\\index.d.ts",
      "todo": "remove this in the next major version, refactor the whole definition to:"
    },
    {
      "file": "shared\\node_modules\\wrap-ansi-cjs\\node_modules\\string-width\\index.js",
      "todo": "remove this in the next major version"
    },
    {
      "file": "shared\\node_modules\\zod\\src\\v3\\tests\\object.test.ts",
      "todo": "// util.assertEqual<Merged, { a?: string; b: string }>(true);"
    },
    {
      "file": "shared\\node_modules\\zod\\src\\v4\\classic\\tests\\lazy.test.ts",
      "todo": "test(\"mutual recursion with cyclical data\", () => {"
    }
  ],
  "issues": [],
  "type_usage": {
    "backend\\ai\\ml_integration.py": [
      "FieldType"
    ],
    "backend\\routers\\parse.py": [
      "("
    ],
    "backend\\routers\\upload.py": [
      "UploadResponse"
    ],
    "backend\\services\\ai_assistance.py": [
      "("
    ],
    "backend\\services\\parser_engine.py": [
      "JobData",
      "ProcessingStatus"
    ],
    "backend\\storage\\job_store.py": [
      "JobData",
      "ProcessingStatus"
    ],
    "shared\\types.py": [
      "X"
    ],
    "frontend\\src\\hooks\\useAutoSave.ts": [
      "ParsedField"
    ],
    "frontend\\src\\hooks\\useValidation.ts": [
      "ParsedField"
    ],
    "frontend\\src\\services\\ai.ts": [
      "AIPredictedField",
      "UserCorrection"
    ],
    "frontend\\src\\services\\api.ts": [
      "FieldCategory",
      "FieldType",
      "JobStatus",
      "ParsedField"
    ],
    "shared\\type_migration.ts": [
      "DocumentMetadata",
      "AIPredictedField",
      "UserCorrection"
    ],
    "shared\\type_strategy.ts": [
      "${typeName"
    ],
    "PreviewSummary.tsx": [
      "ParsedField",
      "FieldCategory"
    ],
    "frontend\\src\\components\\CategorySection.tsx": [
      "ParsedField",
      "FieldCategory"
    ],
    "frontend\\src\\components\\FieldEditor.tsx": [
      "ParsedField",
      "FieldType"
    ],
    "frontend\\src\\components\\FieldList.tsx": [
      "ParsedField"
    ],
    "frontend\\src\\components\\FormPreview.tsx": [
      "ParsedField"
    ],
    "frontend\\src\\components\\PreviewSummary.tsx": [
      "ParsedField"
    ],
    "frontend\\src\\pages\\Preview.tsx": [
      "JobStatus",
      "ParsedField"
    ]
  },
  "integration_points": [
    {
      "type": "ML \u2192 AI Service",
      "file": "backend\\services\\ai_assistance.py"
    }
  ],
  "ml_implementations": {
    "register_ml_model": {
      "file": "backend\\services\\ai_assistance.py",
      "async": false,
      "args": [
        "model_name",
        "model_func"
      ]
    },
    "to_enhanced_model": {
      "file": "backend\\services\\ai_assistance.py",
      "async": false,
      "args": [
        "self"
      ]
    }
  }
}