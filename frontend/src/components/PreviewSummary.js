import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const PreviewSummary = ({ fields, onFieldUpdate, onResetAll, isLoading, jobId }) => {
    const totalFields = fields.length;
    const extractedFields = fields.filter(field => field.value && field.value.trim() !== '').length;
    const confidenceScore = fields.reduce((sum, field) => sum + (field.confidence || 0), 0) / totalFields || 0;
    return (_jsxs("div", { className: "preview-summary", children: [_jsx("h3", { children: "Document Summary" }), _jsxs("div", { className: "summary-stats", children: [_jsxs("div", { className: "stat", children: [_jsx("span", { className: "stat-label", children: "Total Fields:" }), _jsx("span", { className: "stat-value", children: totalFields })] }), _jsxs("div", { className: "stat", children: [_jsx("span", { className: "stat-label", children: "Extracted:" }), _jsx("span", { className: "stat-value", children: extractedFields })] }), _jsxs("div", { className: "stat", children: [_jsx("span", { className: "stat-label", children: "Confidence:" }), _jsxs("span", { className: "stat-value", children: [Math.round(confidenceScore * 100), "%"] })] })] }), _jsxs("div", { className: "field-summary", children: [_jsx("h4", { children: "Extracted Fields" }), _jsx("div", { className: "field-list", children: fields.map((field, index) => (_jsxs("div", { className: "field-item", children: [_jsxs("label", { className: "field-name", children: [field.name, ":"] }), _jsx("input", { type: "text", value: field.value || '', onChange: (e) => onFieldUpdate({ ...field, value: e.target.value }), className: "field-input", disabled: isLoading }), _jsxs("span", { className: "field-confidence", children: [field.confidence ? Math.round(field.confidence * 100) : 0, "%"] })] }, index))) }), _jsx("div", { className: "summary-actions", children: _jsx("button", { onClick: onResetAll, disabled: isLoading, className: "reset-button", children: "Reset All Fields" }) })] })] }));
};
export default PreviewSummary;
